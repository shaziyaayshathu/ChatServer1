{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 15);\n    i0.ɵɵtext(1, \"Please provide a valid email address >\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return [\"/login\"];\n};\nexport class RegisterComponent {\n  constructor(authService, router, formBuilder) {\n    this.authService = authService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n  }\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      //controlname: ['initial value', rules]\n      name: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]],\n      password: ['', [Validators.required, Validators.minLength(4)]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(4)]]\n    });\n  }\n  get email() {\n    return this.registerForm.get('email');\n  }\n  register() {\n    if (this.registerForm.get('password').value != this.registerForm.get('confirmPassword').value) {\n      alert(\"Password does not match !\");\n    } else {\n      // let auth = {\n      //   name:this.name,\n      //   email:this.email,\n      //   password: this.password\n      // }\n      this.authService.signUp(this.registerForm.value).subscribe(res => {\n        if (!res.status) alert(res.message);else {\n          this.router.navigate(['/login']);\n        }\n      });\n    }\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 33,\n  vars: 13,\n  consts: [[1, \"container\", \"container-fluid\", \"col-xs-6\", \"col-xs-offset-3\"], [1, \"text-center\", \"page-header\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"inputName\", 1, \"sr-only\"], [\"id\", \"inputName\", \"placeholder\", \"Name\", \"autofocus\", \"true\", \"type\", \"text\", \"name\", \"name\", \"formControlName\", \"name\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"inputEmail\", 1, \"sr-only\"], [\"id\", \"inputEmail\", \"name\", \"email\", \"placeholder\", \"Email address\", \"autofocus\", \"\", \"type\", \"email\", \"required\", \"\", \"formControlName\", \"email\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"inputPassword\", 1, \"sr-only\"], [\"id\", \"inputPassword\", \"name\", \"password\", \"placeholder\", \"Password\", \"required\", \"\", \"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"for\", \"confirmPassword\", 1, \"sr-only\"], [\"id\", \"confirmPassword\", \"name\", \"confirmPpassword\", \"placeholder\", \"Confirm Password\", \"required\", \"\", \"type\", \"password\", \"formControlName\", \"confirmPassword\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-lg\", \"btn-primary\", \"btn-block\", 3, \"disabled\"], [3, \"routerLink\"], [1, \"text-danger\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n      i0.ɵɵtext(2, \"Create account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.register();\n      });\n      i0.ɵɵelement(4, \"br\");\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"br\");\n      i0.ɵɵelementStart(10, \"div\", 3)(11, \"label\", 6);\n      i0.ɵɵtext(12, \"Email address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 7);\n      i0.ɵɵtemplate(14, RegisterComponent_small_14_Template, 2, 0, \"small\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵelementStart(16, \"div\", 3)(17, \"label\", 9);\n      i0.ɵɵtext(18, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"br\");\n      i0.ɵɵelementStart(21, \"div\", 3)(22, \"label\", 11);\n      i0.ɵɵtext(23, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(25, \"br\");\n      i0.ɵɵelementStart(26, \"div\", 3)(27, \"button\", 13);\n      i0.ɵɵtext(28, \"Sign up\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(29, \" \\u00A0\\u00A0\\u00A0\");\n      i0.ɵɵelementStart(30, \"a\", 14);\n      i0.ɵɵtext(31, \"Back to Login\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(32, \"br\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵclassProp(\"is-invalid\", ctx.registerForm.get(\"name\").invalid && ctx.registerForm.get(\"name\").touched);\n      i0.ɵɵadvance(5);\n      i0.ɵɵclassProp(\"is-invalid\", ctx.registerForm.get(\"email\").invalid && ctx.registerForm.get(\"email\").touched);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.email.errors == null ? null : ctx.email.errors.pattern);\n      i0.ɵɵadvance(5);\n      i0.ɵɵclassProp(\"is-invalid\", ctx.registerForm.get(\"password\").invalid && ctx.registerForm.get(\"password\").touched);\n      i0.ɵɵadvance(5);\n      i0.ɵɵclassProp(\"is-invalid\", ctx.registerForm.get(\"confirmPassword\").invalid && ctx.registerForm.get(\"confirmPassword\").touched);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(12, _c0));\n    }\n  },\n  dependencies: [i4.NgIf, i2.RouterLink, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\".container[_ngcontent-%COMP%]{\\r\\n    margin: 100px;\\r\\n    border:2px solid whitesmoke;\\r\\n    width:50%;\\r\\n    align-items: center;\\r\\n    margin-left: 25%;\\r\\n  }\\r\\n  .page-header[_ngcontent-%COMP%]{\\r\\n    background-color: rgb(11, 12, 10);\\r\\n    width: 100%;\\r\\n    margin: 0;\\r\\n    color:white;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLDJCQUEyQjtJQUMzQixTQUFTO0lBQ1QsbUJBQW1CO0lBQ25CLGdCQUFnQjtFQUNsQjtFQUNBO0lBQ0UsaUNBQWlDO0lBQ2pDLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztFQUNiIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lcntcclxuICAgIG1hcmdpbjogMTAwcHg7XHJcbiAgICBib3JkZXI6MnB4IHNvbGlkIHdoaXRlc21va2U7XHJcbiAgICB3aWR0aDo1MCU7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDI1JTtcclxuICB9XHJcbiAgLnBhZ2UtaGVhZGVye1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDExLCAxMiwgMTApO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBjb2xvcjp3aGl0ZTtcclxuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","RegisterComponent","constructor","authService","router","formBuilder","ngOnInit","registerForm","group","name","required","email","pattern","password","minLength","confirmPassword","get","register","value","alert","signUp","subscribe","res","status","message","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\ChatServer\\Frontend\\src\\app\\components\\register\\register.component.ts","E:\\ChatServer\\Frontend\\src\\app\\components\\register\\register.component.html"],"sourcesContent":["import { Component ,OnInit} from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormControl, Validators,FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm:FormGroup |any;\n  \n  \n\n  constructor(public authService:AuthService, private router: Router,private formBuilder: FormBuilder,) {  }\n\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      //controlname: ['initial value', rules]\n      name: [ '',[Validators.required]],\n      email:['',[Validators.required,Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]],\n      password: ['', [Validators.required, Validators.minLength(4)]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(4)]],\n    });\n\n  }\n  get email(){\n    return this.registerForm.get('email')\n  }\n\n  register(){\n    \n    if(this.registerForm.get('password').value!= this.registerForm.get('confirmPassword').value)\n    {\n      alert(\"Password does not match !\")\n    }\n    else{\n    // let auth = {\n    //   name:this.name,\n    //   email:this.email,\n    //   password: this.password\n    // }\n    this.authService.signUp(this.registerForm.value).subscribe((res:any)=>{\n      if (!res.status) alert(res.message)\n      else{\n        this.router.navigate(['/login'])\n      }\n    })\n  }\n}\n\n}\n\n","<div class=\"container container-fluid col-xs-6 col-xs-offset-3\">\n\n    <h2 class=\"text-center page-header\">Create account</h2>\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n  <br>\n    <div class=\"form-group\">\n      <label for=\"inputName\" class=\"sr-only\">Name</label>\n      <input [class.is-invalid] = \"registerForm.get('name').invalid && registerForm.get('name').touched\"  id=\"inputName\" class=\"form-control\" placeholder=\"Name\"  autofocus=\"true\" type=\"text\" name=\"name\" formControlName=\"name\" required>\n      \n         \n    </div>\n  <br>\n    <div class=\"form-group\">\n      <label for=\"inputEmail\" class=\"sr-only\">Email address</label>\n      <input [class.is-invalid] = \"registerForm.get('email').invalid && registerForm.get('email').touched\" id=\"inputEmail\" class=\"form-control\" name=\"email\" placeholder=\"Email address\"  autofocus=\"\" type=\"email\" required formControlName=\"email\">\n      <small *ngIf=\"email.errors?.pattern\" class=\"text-danger\">Please provide a valid email address ></small>\n    </div>\n  <br>\n    <div class=\"form-group\">\n      <label for=\"inputPassword\" class=\"sr-only\">Password</label>\n      <input [class.is-invalid] = \"registerForm.get('password').invalid && registerForm.get('password').touched\" id=\"inputPassword\"  name=\"password\" class=\"form-control\" placeholder=\"Password\" required type=\"password\" formControlName=\"password\">\n    </div>\n  <br>\n  <div class=\"form-group\">\n    <label for=\"confirmPassword\" class=\"sr-only\">Password</label>\n    <input [class.is-invalid] = \"registerForm.get('confirmPassword').invalid && registerForm.get('confirmPassword').touched\" id=\"confirmPassword\" name=\"confirmPpassword\" class=\"form-control\" placeholder=\"Confirm Password\" required type=\"password\" formControlName=\"confirmPassword\">\n  </div>\n<br>\n    <div class=\"form-group\">\n      <button [disabled]=\"registerForm.invalid\" class=\"btn btn-lg btn-primary btn-block\"  type=\"submit\">Sign up</button>\n      &nbsp;&nbsp;&nbsp;<a [routerLink]=\"['/login']\">Back to Login</a>\n    </div>\n  </form>\n  <br>\n  </div>\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}